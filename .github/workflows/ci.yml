name: CI

on:
  push:
    branches: [ master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ master ]

env:
  CARGO_TERM_COLOR: always
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  CRATE_NAME: InvitationBot

jobs:
  check:
    name: Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
      
      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2

      - name: Copy config
        run: cp config.example.yaml config.yaml
      
      - name: Check formatting
        run: cargo fmt --all -- --check
      
      - name: Clippy
        run: cargo clippy -- -D warnings
      
      - name: Run tests
        run: cargo test

  build:
    name: Build on ${{ matrix.platform.os-name }} with rust ${{ matrix.toolchain }}
    runs-on: ${{ matrix.platform.runs-on }}
    env:
      GITHUB_TOKEN: ${{ github.token }}
      RUST_BACKTRACE: 1
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform:
              os-name: FreeBSD-x86_64
              runs-on: ubuntu-22.04
              target: x86_64-unknown-freebsd
              skip-tests: true
            toolchain: beta

          - platform:
              os-name: Linux-x86_64
              runs-on: ubuntu-22.04
              target: x86_64-unknown-linux-musl
              skip-tests: true
            toolchain: stable

          - platform:
              os-name: Linux-x86_64 (native-tls)
              runs-on: ubuntu-22.04
              target: x86_64-unknown-linux-musl
              features: native-tls
              skip-tests: true
            toolchain: stable
          
          - platform:
              os-name: Linux-x86_64
              runs-on: ubuntu-22.04
              target: x86_64-unknown-linux-gnu
              skip-tests: true
            toolchain: stable

          - platform:
              os-name: Linux-x86_64 (native-tls)
              runs-on: ubuntu-22.04
              target: x86_64-unknown-linux-gnu
              features: native-tls
              skip-tests: true
            toolchain: stable

          - platform:
              os-name: Linux-aarch64
              runs-on: ubuntu-22.04
              target: aarch64-unknown-linux-musl
              skip-tests: true
            toolchain: beta

          - platform:
              os-name: Linux-arm
              runs-on: ubuntu-22.04
              target: arm-unknown-linux-musleabi
              skip-tests: true
            toolchain: beta

          - platform:
              os-name: Linux-i686
              runs-on: ubuntu-22.04
              target: i686-unknown-linux-musl
              skip-tests: true
            toolchain: beta

          - platform:
              os-name: Linux-powerpc64
              runs-on: ubuntu-22.04
              target: powerpc64-unknown-linux-gnu
              skip-tests: true
            toolchain: beta

          - platform:
              os-name: Linux-powerpc64le
              runs-on: ubuntu-22.04
              target: powerpc64le-unknown-linux-gnu
              skip-tests: true
            toolchain: beta

          - platform:
              os-name: Linux-riscv64
              runs-on: ubuntu-22.04
              target: riscv64gc-unknown-linux-gnu
              skip-tests: true
            toolchain: beta

          - platform:
              os-name: Linux-s390x
              runs-on: ubuntu-22.04
              target: s390x-unknown-linux-gnu
              skip-tests: true
            toolchain: beta

          - platform:
              os-name: NetBSD-x86_64
              runs-on: ubuntu-22.04
              target: x86_64-unknown-netbsd
              skip-tests: true
            toolchain: beta

          - platform:
              os-name: Windows-aarch64
              runs-on: windows-latest
              target: aarch64-pc-windows-msvc
              skip-tests: true
            toolchain: stable

          - platform:
              os-name: Windows-i686
              runs-on: windows-latest
              target: i686-pc-windows-msvc
              skip-tests: true
            toolchain: stable

          - platform:
              os-name: Windows-x86_64
              runs-on: windows-latest
              target: x86_64-pc-windows-msvc
              skip-tests: true
            toolchain: stable

          - platform:
              os-name: macOS-x86_64
              runs-on: macOS-latest
              target: x86_64-apple-darwin
              skip-tests: true
            toolchain: stable

          - platform:
              os-name: macOS-aarch64
              runs-on: macOS-latest
              target: aarch64-apple-darwin
              skip-tests: true
            toolchain: stable

          # - platform:
          #     os-name: Linux-x86_64
          #     runs-on: ubuntu-22.04
          #     target: x86_64-unknown-linux-musl
          #     bin: InvitationBot
          #   toolchain: beta

          # - platform:
          #     os-name: Linux-x86_64
          #     runs-on: ubuntu-22.04
          #     target: x86_64-unknown-linux-musl
          #     bin: InvitationBot
          #   toolchain: nightly

    steps:
      - uses: actions/checkout@v4

      - name: Set "--features" flag value
        id: set-features-flag-value
        shell: bash
        run: |
          if [ -n "${{ matrix.platform.features }}" ]; then
              echo "features=${{ matrix.platform.features }}" >> "$GITHUB_OUTPUT"
              echo "binary-postfix=-${{ matrix.platform.features }}" >> "$GITHUB_OUTPUT"
          else 
              echo "features=default" >> "$GITHUB_OUTPUT"
              echo "binary-postfix=" >> "$GITHUB_OUTPUT"
          fi
          cat "$GITHUB_OUTPUT"

      - name: Maybe install SSL packages
        run: sudo apt-get update --yes && sudo apt-get install --yes pkg-config openssl libssl-dev
        if: matrix.platform.features == 'native-tls'

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2

      - name: Copy config
        run: cp config.example.yaml config.yaml

      - name: Build binary
        uses: houseabsolute/actions-rust-cross@v1
        with:
          command: "build"
          target: ${{ matrix.platform.target }}
          toolchain: ${{ matrix.toolchain }}
          args:
            "--locked --release --features ${{ steps.set-features-flag-value.outputs.features }}"
          strip: true

      - name: Run tests
        uses: houseabsolute/actions-rust-cross@v1
        with:
          command: "test"
          target: ${{ matrix.platform.target }}
          toolchain: ${{ matrix.toolchain }}
          args:
            "--locked --release  --features ${{ steps.set-features-flag-value.outputs.features }}"
        if: ${{ !matrix.platform.skip-tests }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.CRATE_NAME }}-${{ matrix.platform.target }}${{steps.set-features-flag-value.outputs.binary-postfix }}-${{ matrix.toolchain }}
          path: target/${{ matrix.platform.target }}/release/${{ env.CRATE_NAME }}*

  release:
    name: Release
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          pattern: ${{ env.CRATE_NAME }}-*

      - name: Rename artifacts
        shell: bash
        run: |
          mkdir -p release
          for dir in artifacts/*; do
            for file in "${dir}/*"; do
              file_name=$(basename "${file}")
              if [[ "${file_name}" == *"${CRATE_NAME}"* ]]; then
                dir_name=$(basename "${dir}")
                mv "${file}" "release/${dir_name}"
                if [[ "${file_name}" = *".exe" ]]; then
                  mv "release/${dir_name}" "release/${dir_name}.exe"
                fi
              fi
            done
          done
      
      - name: Tag the repository (pre-release)
        if: ${{ !startsWith(github.ref, 'refs/tags/v') }}
        run: |
          TAG=v$(date -Iseconds | sed 's/[T:\+]/-/g')
          TIME=$(date '+%Y/%m/%d %H:%M')
          echo "$TAG"
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "time=$TIME" >> $GITHUB_OUTPUT
          git config --global user.name "${GITHUB_ACTOR}"
          git config --global user.email "${GITHUB_ACTOR}@users.noreply.github.com"
          git tag -a $TAG -m "Published version $TAG" ${GITHUB_SHA}
          git push origin $TAG
      
      - name: Create release (pre-release)
        uses: softprops/action-gh-release@v2
        if: ${{ !startsWith(github.ref, 'refs/tags/v') }}
        with:
          files: release/*
          prerelease: true
          make_latest: false
          tag_name: ${{ steps.tag.outputs.tag }}
          name: ${{ steps.tag.outputs.time }}
      
      - name: Create release (release)
        uses: softprops/action-gh-release@v2
        if: ${{ startsWith(github.ref, 'refs/tags/v') }}
        with:
          files: release/*
          prerelease: false
          make_latest: true

  docker:
    name: Build and push Docker image
    needs: [check]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,format=long
            type=ref,event=branch
            type=ref,event=pr

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max 